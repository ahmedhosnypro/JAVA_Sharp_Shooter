type: edu
files:
- name: src/shooter/SharpShooter.java
  visible: true
  text: |-
    package shooter;

    import javax.swing.*;

    public class SharpShooter extends JFrame {
        public SharpShooter() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
            setLayout(null);
        }
    }
  learner_created: false
- name: src/shooter/ApplicationRunner.java
  visible: true
  text: |
    package shooter;

    public class ApplicationRunner {
        public static void main(String[] args) {
            new SharpShooter();
        }
    }
  learner_created: false
- name: test/SharpShooterTest.java
  visible: false
  text: |
    import org.assertj.swing.fixture.JLabelFixture;
    import org.assertj.swing.fixture.JPanelFixture;
    import org.assertj.swing.image.ScreenshotTaker;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;
    import shooter.SharpShooter;

    import java.awt.*;
    import java.awt.image.BufferedImage;
    import java.text.MessageFormat;

    import static java.awt.event.KeyEvent.*;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;

    public class SharpShooterTest extends SwingTest {

      public SharpShooterTest() {
        super(new SharpShooter());
      }

      private static final int TARGET_CIRCLE_STEP = 30;
      private static final int TARGET_CENTER = 350;
      private static final int SIGHT_RADIUS = 40;
      private static final int MOVE_STEP = 10;

      private static final int START_X = 100;
      private static final int START_Y = 100;

      @SwingComponent
      private JPanelFixture canvas;

      @SwingComponent
      private JLabelFixture statusbar;


      @DynamicTest(feedback = "It should be difficult to score 10 points.")
      CheckResult test1() {

          canvas.pressKey(VK_SPACE);
          canvas.releaseKey(VK_SPACE);

          for (int i = START_X; i < TARGET_CENTER; i += MOVE_STEP) {
              canvas.pressKey(VK_RIGHT);
              canvas.releaseKey(VK_RIGHT);
          }
          for (int i = START_Y; i < TARGET_CENTER; i += MOVE_STEP) {
              canvas.pressKey(VK_DOWN);
              canvas.releaseKey(VK_DOWN);
          }

          canvas.pressKey(VK_SPACE);
          canvas.releaseKey(VK_SPACE);

          assertEquals(false,
            statusbar.text().toLowerCase().contains("your score: " + 10),
            "It should be difficult to score 10 points." );

          return correct();
      }

        @DynamicTest(feedback = "It should be impossible to return to the start point.")
        CheckResult test2() {

            for (int i = START_X; i < TARGET_CENTER; i += MOVE_STEP) {
                canvas.pressKey(VK_LEFT);
                canvas.releaseKey(VK_LEFT);
            }
            for (int i = START_Y; i < TARGET_CENTER; i += MOVE_STEP) {
                canvas.pressKey(VK_UP);
                canvas.releaseKey(VK_UP);
            }

            canvas.pressKey(VK_SPACE);
            canvas.releaseKey(VK_SPACE);

            var screenshot = takeScreenshot();

            assertEquals(false,
                    checkBullet(screenshot, START_X, START_Y),
                    "It should be impossible to return to the start point." );

            return correct();
        }

      private BufferedImage takeScreenshot() {
        var screenshotTaker = new ScreenshotTaker();
        return screenshotTaker.takeScreenshotOf(canvas.target());
      }

      private boolean checkBullet(BufferedImage screenshot, int x, int y) {
        return Color.BLACK.getRGB() != screenshot.getRGB(x, y) &&
                Color.WHITE.getRGB() != screenshot.getRGB(x, y) &&
                Color.DARK_GRAY.getRGB() != screenshot.getRGB(x, y);
      }

      private static void assertEquals(
              final Object expected,
              final Object actual,
              final String error,
              final Object... args) {

        if (!expected.equals(actual)) {
          final var feedback = MessageFormat.format(error, args);
          throw new WrongAnswer(feedback);
        }
      }

    }
  learner_created: false
- name: src/shooter/Game.java
  visible: true
  text: |-
    package shooter;

    import java.awt.*;
    import java.awt.event.KeyAdapter;
    import java.awt.event.KeyEvent;
    import java.util.List;

    import static java.awt.event.KeyEvent.*;

    public class Game extends KeyAdapter {
        private enum GameState {
            START, GAME, END
        }

        private static final Point center = new Point(350, 350);
        private static GameState gameState = GameState.START;
        private static int lastShotScore = 0;
        private static int ATTEMPTS = 12;
        private final StatusBar statusBar;
        private final Canvas target;

        public Game(Canvas target, StatusBar statusBar) {
            this.target = target;
            this.statusBar = statusBar;
            target.addInstructions();
            target.addKeyListener(this);
        }

        private void shoot(Canvas target, Point bulletHole) {
            lastShotScore = Math.max(0, 10 - (int) center.distance(bulletHole) / 30);
            target.holes.put(bulletHole.getLocation(), lastShotScore);
        }

        private void move(Canvas target, Point aim, int keyPressed) {
            if (keyPressed == VK_UP && aim.y > 40) aim.y -= 10;
            if (keyPressed == VK_DOWN && aim.y < target.getHeight() - 40) aim.y += 10;
            if (keyPressed == VK_LEFT && aim.x > 40) aim.x -= 10;
            if (keyPressed == VK_RIGHT && aim.x < target.getWidth() - 40) aim.x += 10;
            Canvas.sight.setLocation(aim);
        }

        private int getTotalScore(Canvas target) {
            return target.holes.values().stream().mapToInt(Integer::intValue).sum();
        }

        @Override
        public void keyPressed(KeyEvent e) {
            super.keyPressed(e);
            switch (gameState) {
                case START:
                    if (e.getKeyCode() == VK_SPACE) {
                        statusBar.updateStatus(ATTEMPTS, getTotalScore(target), lastShotScore);
                        gameState = GameState.GAME;
                    }
                    break;
                case GAME:
                    if (List.of(VK_UP, VK_DOWN, VK_LEFT, VK_RIGHT).contains(e.getKeyCode())) {
                        move(target, Canvas.sight.getLocation(), e.getKeyCode());
                    } else if (e.getKeyCode() == VK_SPACE) {
                        shoot(target, Canvas.sight.getLocation());
                        if (--ATTEMPTS != 0) statusBar.updateStatus(ATTEMPTS, getTotalScore(target), lastShotScore);
                        else {
                            statusBar.showFinalScore(getTotalScore(target));
                            gameState = GameState.END;
                        }
                    }
                    target.repaint();
            }
        }
    }
  learner_created: true
- name: src/shooter/Canvas.java
  visible: true
  text: |-
    package shooter;

    import javax.swing.*;
    import java.awt.*;
    import java.awt.image.BufferedImage;
    import java.util.*;

    public class Canvas extends JPanel {
        final Map<Point, Integer> holes = new IdentityHashMap<>();
        private static final BufferedImage TARGET = createTargetImage();
        static final JLabel sight = new JLabel();
        final BufferedImage SIGHT_IMAGE;

        public Canvas() {
            setName("Canvas");
            setPreferredSize(new Dimension(700, 700));
            setBackground(Color.DARK_GRAY);
            setFocusable(true);
            setLayout(null);
            sight.setPreferredSize(new Dimension(80, 80));
            sight.setLocation(new Point(350, 350));
            add(sight);
            SIGHT_IMAGE = createSightImage();
        }

        private static BufferedImage createTargetImage() {
            BufferedImage image = new BufferedImage(700, 700, BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2D = image.createGraphics();
            g2D.setColor(Color.BLACK);
            g2D.fillOval(50, 50, 600, 600);
            g2D.setColor(Color.WHITE);
            g2D.fillOval(230, 230, 240, 240);
            g2D.setColor(Color.BLACK);
            g2D.fillOval(320, 320, 60, 60);
            g2D.setFont(new Font("Tahoma", Font.PLAIN | Font.BOLD, 20));
            for (int i = 0, n = 1; n <= 10; i += 30, n++) {
                g2D.setColor(n > 6 ? Color.BLACK : Color.WHITE);
                g2D.drawOval(50 + i, 50 + i, 600 - 2 * i, 600 - 2 * i);
                if (n != 10) {
                    g2D.drawString(String.valueOf(n), 60 + i, 358);
                    g2D.drawString(String.valueOf(n), 630 - i, 358);
                    g2D.drawString(String.valueOf(n), 344, 72 + i);
                    g2D.drawString(String.valueOf(n), 344, 643 - i);
                }
            }
            return image;
        }

        private static BufferedImage createSightImage() {
            BufferedImage image = new BufferedImage(80, 80, BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2D = image.createGraphics();
            g2D.setColor(Color.RED);
            g2D.setStroke(new BasicStroke(1f));
            g2D.drawLine(0, 40, 35, 40);
            g2D.drawLine(45, 40, 80, 40);
            g2D.drawLine(40, 0, 40, 35);
            g2D.drawLine(40, 45, 40, 80);
            g2D.setStroke(new BasicStroke(3f));
            g2D.drawOval(1, 1, 78, 78);
            return image;
        }

        void addInstructions() {
            var legend = new JLabel("<html><font color=red size=+1><b>\u2192 \u2190 \u2191 \u2193</b></font> - aim<br>" +
                    "<font color=red>SPACE</font> - shot", SwingConstants.RIGHT);
            legend.setSize(new Dimension(100, 40));
            legend.setForeground(Color.WHITE);
            legend.setFont(new Font("Arial", Font.PLAIN, 10));
            add(legend);
            legend.repaint();
        }

        @Override
        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2D = (Graphics2D) g;
            g2D.drawImage(TARGET, 0, 0, this);
            g2D.setColor(Color.CYAN);
            holes.keySet().forEach(h -> g2D.fillOval(h.x - 5, h.y - 5, 10, 10));
            var point = sight.getLocation();
            g2D.drawImage(SIGHT_IMAGE, point.x - 40, point.y - 40, null);
        }
    }
  learner_created: true
- name: src/shooter/StatusBar.java
  visible: true
  text: |-
    package shooter;

    import javax.swing.*;
    import java.awt.*;

    public class StatusBar extends JLabel {

        public StatusBar() {
            super("Press the SPACE bar to start the game", SwingConstants.CENTER);
            setName("Statusbar");
            setBackground(Color.BLACK);
            setForeground(Color.WHITE);
            setPreferredSize(new Dimension(700, 30));
            setOpaque(true);
        }

        void updateStatus(int attemptsLeft, int totalScore, int lastShot) {
            setText(String.format("Bullets left: %d, your score: %d (%d).", attemptsLeft, totalScore, lastShot));
        }

        void showFinalScore(int finalScore) {
            setText(String.format("Game over, your score: %d.", finalScore));
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/17153#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 26 Mar 2022 14:41:44 UTC
record: -1
