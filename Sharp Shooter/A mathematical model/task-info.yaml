type: edu
files:
- name: src/shooter/SharpShooter.java
  visible: true
  text: |-
    package shooter;

    import javax.swing.*;

    public class SharpShooter extends JFrame {
        public SharpShooter() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
            setLayout(null);
        }
    }
  learner_created: false
- name: src/shooter/ApplicationRunner.java
  visible: true
  text: |
    package shooter;

    public class ApplicationRunner {
        public static void main(String[] args) {
            new SharpShooter();
        }
    }
  learner_created: false
- name: test/SharpShooterTest.java
  visible: false
  text: |
    import org.assertj.swing.fixture.JLabelFixture;
    import org.assertj.swing.fixture.JPanelFixture;
    import org.assertj.swing.image.ScreenshotTaker;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;
    import shooter.SharpShooter;

    import java.awt.*;
    import java.awt.image.BufferedImage;
    import java.text.MessageFormat;

    import static java.awt.event.KeyEvent.*;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;

    public class SharpShooterTest extends SwingTest {

        private static final int TARGET_CIRCLE_STEP = 30;
        private static final int TARGET_CENTER = 350;
        private static final int SIGHT_RADIUS = 40;
        private static final int MOVE_STEP = 10;
        private final static int MAX_SHOOTING_ATTEMPTS = 12;

        public SharpShooterTest() {
          super(new SharpShooter());
        }

        @SwingComponent
        private JLabelFixture statusbar;

        @SwingComponent
        private JPanelFixture canvas;

        @DynamicTest(feedback = "At start the Statusbar should contain: " +
                                "Press the SPACE bar to start the game.")
        CheckResult test1() {

            // before the game start the sight should be immovable
            for (int i = 0; i < 10; i++) {
                canvas.pressKey(VK_LEFT);
            }

            assertEquals(true,
                statusbar.text().toLowerCase().contains("press the space bar to start the game"),
                "Check statusbar text before game start.");

            return correct();
        }

        @DynamicTest(feedback = "After start the Statusbar should contain: " +
                "Bullets left: " + MAX_SHOOTING_ATTEMPTS + ", your score: 0")
        CheckResult test2() {

            canvas.pressKey(VK_SPACE);

            assertEquals(false,
                    statusbar.text().toLowerCase().contains("press the space bar to start the game."),
                    "Check statusbar text immediately after the game start.");

            assertEquals(true,
                    statusbar.text().toLowerCase().contains("bullets left: " + MAX_SHOOTING_ATTEMPTS),
                    "Wrong calculation of the attempts number.");

            assertEquals(true,
                    statusbar.text().toLowerCase().contains("your score: 0"),
                    "Wrong calculation of the score.");

            return correct();
        }

        private final String[][] SCORE_DATA = {
            {"1",  "1", "0", "11", "10"},
            {"2",  "1", "4", "10", "19"},
            {"3",  "1", "3",  "9", "27"},
            {"4",  "1", "3",  "8", "34"},
            {"5",  "1", "3",  "7", "40"},
            {"6",  "1", "3",  "6", "45"},
            {"7",  "1", "3",  "5", "49"},
            {"8",  "1", "3",  "4", "52"},
            {"9",  "1", "3",  "3", "54"},
            {"10", "1", "3",  "2", "55"},
            {"11", "1", "3",  "1", "55"}
        };

        @DynamicTest(data = "SCORE_DATA", feedback = "Wrong calculation of the attempts number or score.")
        CheckResult test3(final String number, final String spacePress, final String upPress,
                          final String attempts, final String score) {

            for (int i = 0; i < Integer.parseInt(upPress); i++) {
                canvas.pressKey(VK_UP);
            }

            for (int i = 0; i < Integer.parseInt(spacePress); i++) {
                canvas.pressKey(VK_SPACE);
            }

            assertEquals(true,
                statusbar.text().toLowerCase().contains("bullets left: " + attempts),
            "Wrong calculation of the attempts number. " +
                 "After {0} shoot it should be: {1}.", number, attempts);

            assertEquals(true,
                statusbar.text().toLowerCase().contains("your score: " + score),
            "Wrong calculation of the score. " +
                 "After {0} shoot it should be: {1}.", number, attempts);

            return correct();
        }

        @DynamicTest(feedback = "After 12nd shooting the game should be over.")
        CheckResult test4() {

            canvas.pressKey(VK_SPACE);

            assertEquals(false,
                    statusbar.text().toLowerCase().contains("bullets left:"),
                    "Check statusbar text after the end of the game.");

            assertEquals(true,
                    statusbar.text().toLowerCase().contains("game over"),
                    "Status bar should contain: Game over.");

            assertEquals(true,
                    statusbar.text().toLowerCase().contains("your score: 55"),
                    "Status bar should contain: Your score: 55");

            return correct();
        }

        private final int[] BULLET_HOLES = new int[] {0, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31};

        @DynamicTest(data = "BULLET_HOLES", feedback = "After the end of the game the sight should have 11 bullet holes.")
        CheckResult test5(final int dy) {

            var screenshot = takeScreenshot();

            var x = TARGET_CENTER;
            var y = TARGET_CENTER - dy * MOVE_STEP;

            assertEquals(true,
                    checkBullet(screenshot, x, y),
                    "Expected a bullet hole at point ({0}, {1})", x, y);

            return correct();
        }


        @DynamicTest(feedback = "After the end of the game the sight should be immovable.")
        CheckResult test6() {
            for (int i = 0; i < 10; i++) {
                canvas.pressKey(VK_RIGHT);
            }
            canvas.pressKey(VK_SPACE);

            var screenshot = takeScreenshot();

            var x = TARGET_CENTER - 10 * MOVE_STEP;
            var y = 40;

            assertEquals(false,
                    checkBullet(screenshot, x, y),
                    "Not expected a bullet hole at point ({0}, {1})", x, y);

            return correct();
        }


        private BufferedImage takeScreenshot() {
            var screenshotTaker = new ScreenshotTaker();
            return screenshotTaker.takeScreenshotOf(canvas.target());
        }

        private boolean checkBullet(BufferedImage screenshot, int x, int y) {
            return Color.BLACK.getRGB() != screenshot.getRGB(x, y) &&
                    Color.WHITE.getRGB() != screenshot.getRGB(x, y) &&
                    Color.DARK_GRAY.getRGB() != screenshot.getRGB(x, y);
        }

        // TODO: The game graph

        private static void assertEquals(
                final Object expected,
                final Object actual,
                final String error,
                final Object... args) {

            if (!expected.equals(actual)) {
                final var feedback = MessageFormat.format(error, args);
                throw new WrongAnswer(feedback);
            }
        }
    }
  learner_created: false
- name: src/shooter/BulletHole.java
  visible: true
  text: |
    package shooter;

    public class BulletHole {
        private final int X;
        private final int Y;

        public BulletHole(int x, int y) {
            X = x + 5;
            Y = y + 5;
        }

        public int getX() {
            return X;
        }

        public int getY() {
            return Y;
        }
    }
  learner_created: true
- name: src/shooter/Canvas.java
  visible: true
  text: |
    package shooter;

    import javax.swing.*;
    import java.awt.*;
    import java.awt.event.KeyEvent;
    import java.awt.event.KeyListener;
    import java.awt.event.MouseEvent;
    import java.awt.event.MouseListener;
    import java.util.ArrayList;

    public class Canvas extends JPanel implements MouseListener {
        int gunSightX = 340;
        int gunSightY = 340;

        transient ArrayList<BulletHole> bulletHoles = new ArrayList<>();

        Canvas(String name) {
            setName(name);
            setPreferredSize(new Dimension(700, 700));
            setMinimumSize(new Dimension(700, 700));
            setBackground(Color.DARK_GRAY);


            addMouseListener(this);

            //space-32 left-37 up-38 right-39 down-40
            addKeyListener(new KeyListener() {
                @Override
                public void keyTyped(KeyEvent e) {
                    //not used
                }

                @Override
                public void keyPressed(KeyEvent e) {
                    switch (e.getKeyCode()) {
                        case 32 -> shoot();
                        case 37 -> {     //left
                            if (gunSightX >= 40) {
                                gunSightX -= 10;
                            }
                        }
                        case 38 -> {     //up
                            if (gunSightY >= 40) {
                                gunSightY -= 10;
                            }
                        }
                        case 39 -> {     //right
                            if (gunSightX <= 640) {
                                gunSightX += 10;
                            }
                        }
                        case 40 -> {     //down
                            if (gunSightY <= 640) {
                                gunSightY += 10;
                            }
                        }
                    }
                    repaint();
                }

                @Override
                public void keyReleased(KeyEvent e) {
                    //not used
                }
            });
        }

        private void shoot() {
            bulletHoles.add(new BulletHole(gunSightX, gunSightY));
        }

        @Override
        public void paint(Graphics g) {
            super.paint(g);

            g.setColor(Color.BLACK);

            //1-6 circles
            g.fillOval(50, 50, 600, 600);
            g.fillOval(80, 80, 540, 540);
            g.fillOval(110, 110, 480, 480);
            g.fillOval(140, 140, 420, 420);
            g.fillOval(170, 170, 360, 360);
            g.fillOval(200, 200, 300, 300);

            g.setColor(Color.WHITE);

            //7-9 circles
            g.fillOval(230, 230, 240, 240);
            g.fillOval(260, 260, 180, 180);
            g.fillOval(290, 290, 120, 120);

            g.setColor(Color.BLACK);

            //10th circle
            g.fillOval(320, 320, 60, 60);

            //Gun Sight
            g.setColor(Color.RED);
            g.fillOval(gunSightX, gunSightY, 20, 20);

            g.setColor(Color.lightGray);
            for (var bh : bulletHoles) {
                g.fillOval(bh.getX(), bh.getY(), 10, 10);
            }
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            System.out.println(e.getX());
            System.out.println(e.getY());
        }

        @Override
        public void mousePressed(MouseEvent e) {
            //not used
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            //not used
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            //not used
        }

        @Override
        public void mouseExited(MouseEvent e) {
            //not used
        }
    }
  learner_created: true
- name: src/shooter/StatusBar.java
  visible: true
  learner_created: true
- name: src/shooter/Game.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/17152#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 25 Mar 2022 18:37:24 UTC
record: 3
